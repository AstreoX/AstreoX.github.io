{"title":"大语言模型P1","uid":"01ada737b1644154f9d4511dc216943b","slug":"大语言模型P1","date":"2025-05-24T08:54:03.000Z","updated":"2025-05-24T15:36:44.977Z","comments":true,"path":"api/articles/大语言模型P1.json","keywords":null,"cover":"https://free4.yunpng.top/2025/05/09/681d518f64783.png","content":"<h1>北京大语言模型实践 Day 1</h1>\n<p>​\t 来到北京第一天，参加大语言模型的实践。</p>\n<p>​\t今天北京真的是格外的冷，零下19度，还有大风呼呼的吹，本来带了两件外套想着轮着穿，结果到最后一起穿在了身上，裹的和太空人一样</p>\n<hr>\n<h2 id=\"课程资源介绍\">课程资源介绍</h2>\n<p>我们的课程资源大概有这三个方面：</p>\n<ol>\n<li>\n<p><strong>《Hands-On Large Language Models》</strong></p>\n<p>这书倒是蛮新的，新到国内尚无中文译本（截至我们开课前2025.2.7）</p>\n<p>而且手把手教着搓大语言模型，实践性很强，有配套的Github代码仓库</p>\n<pre><code class=\"language-URL\">https://github.com/rasbt/LLMs-from-scratch\n</code></pre>\n</li>\n<li>\n<p><strong>《大语言模型》</strong>（赵鑫/李军毅/周昆/唐天一/文继荣 著）</p>\n<p>这书感觉就是更加理论化一点，而且因为是国内大佬编写的，所以也不像第一个英文原版一样读起来还有点困难，作为实践之中的理论补充还是非常不错的</p>\n</li>\n<li>\n<p><strong>OpenBMB</strong></p>\n<p>这是个携手清华打造的线上课程，分p很细，可以挑选自己感兴趣的着重学习一下，虽然这个主要是我们在实践前作为前置内容学习的，不过课程还是非常有质量有深度的，回来还是要再好好看一下</p>\n</li>\n</ol>\n<hr>\n<p>ok，那么接下来就要进入课程了</p>\n<p>一开课的惯例：课程介绍，老师介绍，大语言模型趋势，人工智能与机器学习的基本概念介绍</p>\n<p>一大堆介绍完之后，终于来到了大语言模型的简介。这也算是我最感兴趣的内容，从了解到大语言模型之日起（大概是在22年11月份刚刚使用过GPT后不久），我就一直非常好奇这种LLM究竟是怎样理解我们人类的语言的，之前只是模模糊糊知道一点关于&quot;token&quot;的事情，知道那是个大概的大模型拆分语言的单元，今天总算能从头到尾去彻底理解一下了</p>\n<p>（另外下面小小的感慨一下）</p>\n<p>PPT正文首页就是&quot;60年的算法积累，辛顿位列C位，能在60年前人类的CPU才刚刚买入集成电路的时代的算力条件下有勇气去搞神经网络，&quot;先驱&quot;一词在他身上大概就是最好的体现。 （另外，对于辛顿有一篇文章写的特别好，可以来看看   <a href=\"https://www.zhihu.com/question/493793998/answer/1901401663572538161\">为什么有些人能够那么强大又那么温柔？ - 知乎</a>）</p>\n<img src=\"/post/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508014658502.png\" class=\"\">\n<hr>\n<p>好了言归正传，让我们首先来从大语言模型的历史开始：</p>\n<h2 id=\"自然语言处理引子\">自然语言处理引子</h2>\n<p><strong>在2017年划时代的Transformer架构发布之前，众多优秀的计算机科学家也在自然语言处理的道路上进行了深远的探索。</strong></p>\n<img src=\"/post/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508014809363.png\" class=\"\">\n<h3 id=\"1-词袋模型-（Bag-of-Words）\">1. 词袋模型 （Bag-of-Words）</h3>\n<h4 id=\"主要前提：\">主要前提：</h4>\n<p>​\t\t假设文本的语义主要由其中包含的词汇及其出现次数决定，而词的顺序和语法可以忽略。</p>\n<h4 id=\"构建过程：\">构建过程：</h4>\n<ul>\n<li>首先需要从训练文本中提取所有不同的单词，形成一个词典</li>\n</ul>\n<p>​\t\t再对于每一文本，根据词典中单词的出现次数，将文本转换为一个向量</p>\n<ul>\n<li>\n<p>有点抽象不太好懂？</p>\n<p>举个例子：</p>\n<p>假设有两句话：“我爱自然语言处理&quot;和&quot;自然语言处理很有趣”。</p>\n<p>构建词典时，会将所有不同的词列出：[“我”, “爱”, “自然语言处理”, “很”, “有趣”]。</p>\n<p>第一句话对应的向量就是1,1,1,0,0，第二句话对应的向量是0,0,1,1,1。</p>\n<p>词袋模型的处理就是这个样子，有点类似于关键词匹配</p>\n</li>\n</ul>\n<img src=\"/post/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508014907452.png\" class=\"\">\n<h4 id=\"评价：\">评价：</h4>\n<p>这样子好处当然是有的，<strong>处理算法的简单带来了计算的高效</strong></p>\n<p>但是缺点也显而易见：</p>\n<ul>\n<li><strong>丢失语序信息</strong>：词袋模型忽略了词的顺序，这可能导致对文本语义的误解，比如 &quot;我喜欢她&quot;和&quot;她喜欢我&quot;在词袋模型中表示相同，但这实际上就根本不是一回事</li>\n<li><strong>维度灾难</strong>： 当文本数据量大时，词典的维度可能会变得非常高，导致向量维度过大，增加计算复杂度。</li>\n<li><strong>无法捕捉语义</strong>：无法捕捉词之间的语义关系和上下文信息，不同的词即使语义相似，在词袋模型中也会被表示为不同的维度。</li>\n</ul>\n<h3 id=\"2-Word2Vec-（稠密向量-嵌入向量）\">2.Word2Vec （稠密向量/嵌入向量）</h3>\n<p>​\t这我觉得是一项天才般的技术设计，巧妙地使程序具有了类似人类的语义理解功能，让我们一起来看一下：</p>\n<ul>\n<li>\n<h4 id=\"主要假设：\">主要假设：</h4>\n</li>\n</ul>\n<p>​\t\t分布式语义假说（“You shall know a word by the company it keeps”）</p>\n<p>​\t\t也就是说，它信奉<strong>词的出现上下文决定词的语义</strong>假说，将每个词看成一个点，通过训练，让频繁一起出现的词在向量空间中距离更近，从而捕捉词的语义信息。</p>\n<ul>\n<li>\n<h4 id=\"我们举一个二维空间的例子来理解：\">我们举一个二维空间的例子来理解：</h4>\n</li>\n<li>\n<p><img src=\"/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508014943370.png\" alt=\"\"></p>\n<p>如图所示我们可以看到有cats dog apple building adult等单词分布在这个空间中 其中 cats dog puppy都是小宠物一类的，在这个向量空间中就非常接近，聚成了一簇；同时我们观察另外几个类似的簇，都能找到类似的共同点</p>\n<p>那么，通过查找在向量空间中的距离远近，大语言模型就可以理解其中不同词的相关性，做出一种语义的理解。</p>\n</li>\n</ul>\n<img src=\"/post/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508015024865.png\" class=\"\">\n<ul>\n<li>\n<p>想想看，我们人类的词典也是用一些词去解释另一个词，直到一些基本的词不能再拆分为显式的解释，而是一种模模糊糊的次级概念。对于大模型也是一样word2vec技术也并没有具体的把每个簇都显式地加上一个标签对吧，也是大模型的一种模模糊糊的<strong>次级概念理解</strong>。</p>\n</li>\n<li>\n<p>那么在自然语言的处理过程中，将语言中的词去映射为低维，稠密的向量的过程，就叫做向量嵌入，也就是常说的embedding过程。</p>\n</li>\n<li>\n<p>而且不仅是单词，实际上，<strong>不同层级的文本都可以做embedding</strong>，token层级，word层级，sentence层级，document层级上都可以做向量嵌入，单词的embedding就是单词的一个向量表示它的语义，句子的embedding就是这句话的语义向量（当然可能这句话的语义很复杂，但确实是可以的），文档的embedding就是这一大段的一个整体的语义。</p>\n</li>\n<li>\n<p><img src=\"/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508015051015.png\" alt=\"\"></p>\n</li>\n<li>\n<h4 id=\"缺点：\">缺点：</h4>\n<ul>\n<li><strong>一词多义问题：</strong> 像是charge这样有很多很不想干的释义就难以在向量空间中找到合适的对应位置</li>\n<li><strong>缺少上下文信息</strong>：如像是it这种代词，单论语义很复杂，什么都有可能包含，需要去看上下文信息解读所代指的东西，但如果纯靠向量来解析语义就很困难</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-RNN-Recurrent-Neural-Network）\">3. RNN(Recurrent Neural Network）</h3>\n<p>​\t那么为了解决上下文信息的问题，人们又引入了这玩意——循环神经网络</p>\n<ul>\n<li>\n<p>RNN 具有<strong>记忆功能</strong>，它会对之前的信息进行记忆，将信息从当前步骤传递到下一步骤，形成一个<strong>循环结构</strong>，使得网络能够记住之前的信息，对于序列数据的处理非常有效。</p>\n</li>\n<li>\n<p><img src=\"/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508015117281.png\" alt=\"\"></p>\n</li>\n<li>\n<p><img src=\"/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508015129201.png\" alt=\"\"></p>\n</li>\n<li>\n<p><img src=\"/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508015208085.png\" alt=\"\"></p>\n</li>\n<li>\n<p><img src=\"/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8BP1/image-20250508015218712.png\" alt=\"\"></p>\n</li>\n<li>\n<p>(该图展示的为带注意力机制的RNN)</p>\n</li>\n<li>\n<p>但是我们从他的运行方式就可以看到，它是一种<strong>循环顺序运行</strong>的方式，每次只处理一个附加的token，这种方式<strong>无法并行计算</strong>，就无法使其运行速度得到很大的提高。</p>\n<p>而且这种序列化的处理方式也对训练带来了很多困难。如果训练的序列过长，就会有<strong>梯度消失</strong>或者<strong>梯度爆炸</strong>，难以捕捉长序列中的上下文关系。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"尾声\">尾声</h3>\n<p>​\t好了，<strong>Bag-of-Words</strong>带我们迈入了自然语言处理的大门，<strong>Word2Vec</strong>技术又通过巧妙的向量语义空间设置，使自然语言处理在语义理解方面甩开了大步子，<strong>RNN</strong>试图解决上下文的注意力问题，但方向似乎有点不对头，无法并行计算到最后终究只能靠大力出奇迹，但也走得很远了，在一般的情感分析和机器翻译任务中也取得了不少傲人的成绩。</p>\n<p>​\t<strong>一切都已就位，但似乎就差那么关键的一步了……</strong></p>\n<p>​\tRNN的无法并行计算特点极大地限制了算力的释放，针对上下文的处理也并没有达到很好的效果，这成为了卡住大规模自然语言处理的最后一道枷锁。</p>\n<p>​\t\t舞台已经搭建完毕，演员也已全部就位，那划时代的架构也该登场了……</p>\n","feature":true,"text":"北京大语言模型实践 Day 1 ​ 来到北京第一天，参加大语言模型的实践。 ​ 今天北京真的是格外的冷，零下19度，还有大风呼呼的吹，本来带了两件外套想着轮着穿...","permalink":"/post/大语言模型P1","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"技术","slug":"技术","count":2,"path":"api/tags/技术.json"},{"name":"AI","slug":"AI","count":1,"path":"api/tags/AI.json"},{"name":"自然语言处理","slug":"自然语言处理","count":1,"path":"api/tags/自然语言处理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\"><span class=\"toc-text\">北京大语言模型实践 Day 1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%BA%90%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">课程资源介绍</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E5%BC%95%E5%AD%90\"><span class=\"toc-text\">自然语言处理引子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E8%AF%8D%E8%A2%8B%E6%A8%A1%E5%9E%8B-%EF%BC%88Bag-of-Words%EF%BC%89\"><span class=\"toc-text\">1. 词袋模型 （Bag-of-Words）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E5%89%8D%E6%8F%90%EF%BC%9A\"><span class=\"toc-text\">主要前提：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%EF%BC%9A\"><span class=\"toc-text\">构建过程：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%84%E4%BB%B7%EF%BC%9A\"><span class=\"toc-text\">评价：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Word2Vec-%EF%BC%88%E7%A8%A0%E5%AF%86%E5%90%91%E9%87%8F-%E5%B5%8C%E5%85%A5%E5%90%91%E9%87%8F%EF%BC%89\"><span class=\"toc-text\">2.Word2Vec （稠密向量&#x2F;嵌入向量）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E5%81%87%E8%AE%BE%EF%BC%9A\"><span class=\"toc-text\">主要假设：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%91%E4%BB%AC%E4%B8%BE%E4%B8%80%E4%B8%AA%E4%BA%8C%E7%BB%B4%E7%A9%BA%E9%97%B4%E7%9A%84%E4%BE%8B%E5%AD%90%E6%9D%A5%E7%90%86%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">我们举一个二维空间的例子来理解：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">缺点：</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-RNN-Recurrent-Neural-Network%EF%BC%89\"><span class=\"toc-text\">3. RNN(Recurrent Neural Network）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%BE%E5%A3%B0\"><span class=\"toc-text\">尾声</span></a></li></ol></li></ol></li></ol>","author":{"name":"AstreoX","slug":"blog-author","avatar":"https://cdn4.winhlb.com/2025/05/24/68317013caa8d.jpg","link":"/","description":"404 AstreoX not Found","socials":{}},"mapped":true,"hidden":false,"prev_post":{"title":"Markdown语法入门解析","uid":"e050c2622596e101b3e77ca231223274","slug":"Markdown语法入门解析","date":"2025-05-24T10:33:36.000Z","updated":"2025-05-24T15:38:28.247Z","comments":true,"path":"api/articles/Markdown语法入门解析.json","keywords":null,"cover":"https://free4.yunpng.top/2025/05/10/681f691f1e8cf.png","text":"Markdown 语法入门解析 什么？还不会用markdown？还不赶紧来学学 一、标题 标题在 Markdown 中使用 # 号来创建。# 的数量决定了标题的...","permalink":"/post/Markdown语法入门解析","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"入门","slug":"入门","count":2,"path":"api/tags/入门.json"},{"name":"Markdown","slug":"Markdown","count":1,"path":"api/tags/Markdown.json"},{"name":"语法","slug":"语法","count":1,"path":"api/tags/语法.json"}],"author":{"name":"AstreoX","slug":"blog-author","avatar":"https://cdn4.winhlb.com/2025/05/24/68317013caa8d.jpg","link":"/","description":"404 AstreoX not Found","socials":{}},"feature":true},"next_post":{"title":"Github详解: 从入门到精通","uid":"647c4edecec5c6b48ebc0d64a7cb455e","slug":"Github详解-从入门到精通","date":"2025-05-11T16:07:54.000Z","updated":"2025-05-24T15:40:10.759Z","comments":true,"path":"api/articles/Github详解-从入门到精通.json","keywords":null,"cover":"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xOTM0MTk4My05YjI2Y2RkOTM3NjA0NmE4LnBuZw?x-oss-process=image/format,png","text":"Git 与 GitHub 详解：从入门到精通 引言 哎呀也是叫我用上“从入门到精通”这个经典标题了，鉴于很多人搞不懂Git和Github的关系，而且也不怎么会使...","permalink":"/post/Github详解-从入门到精通","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"Github","slug":"Github","count":1,"path":"api/tags/Github.json"},{"name":"教程","slug":"教程","count":1,"path":"api/tags/教程.json"},{"name":"入门","slug":"入门","count":2,"path":"api/tags/入门.json"},{"name":"技术","slug":"技术","count":2,"path":"api/tags/技术.json"}],"author":{"name":"AstreoX","slug":"blog-author","avatar":"https://cdn4.winhlb.com/2025/05/24/68317013caa8d.jpg","link":"/","description":"404 AstreoX not Found","socials":{}}}}